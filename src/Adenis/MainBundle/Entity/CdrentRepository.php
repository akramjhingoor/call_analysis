<?php

namespace Adenis\MainBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Adenis\MainBundle\Util\Util;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * CdrentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CdrentRepository extends EntityRepository {

    //NUMEROS DE TELEPHONE SRC OU DST
    public function search($search_params, $limit, $first) {
        $where = $this->getWhere($search_params);
        $result = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('c')
                ->from('AdenisMainBundle:Cdrent', 'c')
                ->where($where)
                ->setFirstResult($first)
                ->setMaxResults($limit)
                ->getQuery()
                ->getResult();

        return $result;
    }

    public function countSearch($search_params) {
        $where = $this->getWhere($search_params);

        if ($where == '') {
            return 0;
        }

        $result = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('count(c.id)')
                ->from('AdenisMainBundle:Cdrent', 'c')
                ->where($where)
                ->getQuery()
                ->getSingleScalarResult();

        return $result;
    }

    public function sumSearch($search_params) {
        $where = $this->getWhere($search_params);

        if ($where == '') {
            return 0;
        }

        $result = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('sum(c.billsec)')
                ->from('AdenisMainBundle:Cdrent', 'c')
                ->where($where)
                ->getQuery()
                ->getSingleScalarResult();

        return $result;
    }

    private function getWhere($search_params) {
        $where = "";
        $operator = "";

        foreach ($search_params as $key => $value) {
            switch ($key) {
                case "dst":
                    $where = $where . $operator . "(c.dst LIKE '%$value%')";
                    break;
                case "clid":
                    $where = $where . $operator . "(c.clid LIKE '%$value%')";
                    break;
                case "src":
                    $where = $where . $operator . "(c.src LIKE '%$value%')";
                    break;
                case "dateini":
                    $dateini = \DateTime::createFromFormat('d-m-Y', $value)->format('Y-m-d');
                    $where = $where . $operator . "(c.calldate >= '$dateini')";
                    break;
                case "datefin":
                    $datefin = \DateTime::createFromFormat('d-m-Y', $value)->format('Y-m-d');
                    $where = $where . $operator . "(c.calldate <= '$datefin')";
                    break;
                case "durationmin":
                    $where = $where . $operator . "(c.billsec >= $value)";
                    break;
                case "durationmax":
                    $where = $where . $operator . "(c.billsec <= $value)";
                    break;
                case "numero":
                    $where = $where . $operator . "(c.src LIKE '%$value%' OR c.dst LIKE '%$value%' OR c.clid LIKE '%$value%')";
                    break;
            }
            $operator = " AND ";
        }

        return $where;
    }

    //*********************
    //COLLECTION DE NUMEROS
    //*********************
    public function countSearch2($search_params) {
        $where = $this->getWhere2($search_params);

        if ($where == '') {
            return 0;
        }

        $result = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('count(c.id)')
                ->from('AdenisMainBundle:Cdrent', 'c')
                ->where($where)
                ->getQuery()
                ->getSingleScalarResult();

        return $result;
    }

    public function sumSearch2($search_params) {
        $where = $this->getWhere2($search_params);

        if ($where == '') {
            return 0;
        }

        $result = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('sum(c.billsec)')
                ->from('AdenisMainBundle:Cdrent', 'c')
                ->where($where)
                ->getQuery()
                ->getSingleScalarResult();

        return $result;
    }

    public function search2($search_params) {
        $where = $this->getWhere2($search_params);
        
        if($where == null){
            return '';
        } 
        
        $result = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('c')
                ->from('AdenisMainBundle:Cdrent', 'c')
                ->where($where)
                ->getQuery()
                ->getResult();

        return $result;
    }

    private function getWhere2($search_params) {
        $where = "";
        $operator = "";

        foreach ($search_params as $key => $value) {
            switch ($key) {
                case "numero":
                    $where = $where . $operator . $value;
                    $operator = " AND ";
                    break;
                case "dateini":
                    $dateini = \DateTime::createFromFormat('d-m-Y', $value)->format('Y-m-d');
                    $where = $where . $operator . "(c.calldate >= '$dateini')";
                    $operator = " AND ";
                    break;
                case "datefin":
                    $datefin = \DateTime::createFromFormat('d-m-Y', $value)->format('Y-m-d');
                    $where = $where . $operator . "(c.calldate <= '$datefin')";
                    $operator = " AND ";
                    break;
                case "durationmin":
                    $where = $where . $operator . "(c.billsec >= $value)";
                    $operator = " AND ";
                    break;
                case "durationmax":
                    $where = $where . $operator . "(c.billsec <= $value)";
                    $operator = " AND ";
                    break;
                case "codecontact":
                    $where = $where . $operator . "(c.codecontact = '$value')";
                    $operator = " AND ";
                    break;
            }
        }
        
        return $where;
    }

    //*********************
    //TOUTES LES ELEMENTS
    //*********************
    public function count() {
        $result = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('count(c.id)')
                ->from('AdenisMainBundle:Cdrent', 'c')
                ->getQuery()
                ->getSingleScalarResult();
        return $result;
    }

    public function sum() {
        $result = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('sum(c.billsec)')
                ->from('AdenisMainBundle:Cdrent', 'c')
                ->getQuery()
                ->getSingleScalarResult();
        return $result;
    }

    //**************************************************
    //* GET ALL NUMEROS FROM CONTACT AND INTERLOCUTEURS
    //*************************************************
    public function getNumeros($interlocuteurs, $contact) {

        $result = "";
        $operator = "";

        /*
         * INTERLOCUTEURS
         */
        foreach ($interlocuteurs as $i) {
            $tel1 = Util::correctNumber($i->getTel1());
            if ($tel1 != null) {
                //$result = $result . $operator . " c.dst LIKE '%" . $tel1 . "%' OR c.src LIKE '%" . $tel1 . "%' OR c.clid LIKE '%" . $tel1 . "%'";
                $result = $result . $operator . " c.clid LIKE '%" . $tel1 . "%'";
                $operator = " OR ";
            }

            $tel2 = Util::correctNumber($i->getTel2());
            if ($tel2 != null) {
                //$result = $result . $operator . " c.dst LIKE '%" . $tel2 . "%' OR c.src LIKE '%" . $tel2 . "%' OR c.clid LIKE '%" . $tel2 . "%'";
                $result = $result . $operator . " c.clid LIKE '%" . $tel2 . "%'";
                $operator = " OR ";
            }

            $tel3 = Util::correctNumber($i->getTel3());
            if ($tel3 != null) {
                //$result = $result . $operator . " c.dst LIKE '%" . $tel3 . "%' OR c.src LIKE '%" . $tel3 . "%' OR c.clid LIKE '%" . $tel3 . "%'";
                $result = $result . $operator . " c.clid LIKE '%" . $tel3 . "%'";
                $operator = " OR ";
            }

            $tel4 = Util::correctNumber($i->getTel4());
            if ($tel4 != null) {
                //$result = $result . $operator . " c.dst LIKE '%" . $tel4 . "%' OR c.src LIKE '%" . $tel4 . "%' OR c.clid LIKE '%" . $tel4 . "%'";
                $result = $result . $operator . " c.clid LIKE '%" . $tel4 . "%'";
                $operator = " OR ";
            }

            $email = Util::correctNumber($i->getEmail());
            if ($email != null) {
                //$result = $result . $operator . " c.dst LIKE '%" . $email . "%' OR c.src LIKE '%" . $email . "%' OR c.clid LIKE '%" . $email . "%'";
                $result = $result . $operator . " c.clid LIKE '%" . $email . "%'";
                $operator = " OR ";
            }
        }

        /*
         * CONTACT
         */
        $ctel1 = Util::correctNumber($contact->getTel1());
        if ($ctel1 != null) {
            //$result = $result . $operator . " c.dst LIKE '%" . $ctel1 . "%' OR c.src LIKE '%" . $ctel1 . "%' OR c.clid LIKE '%" . $ctel1 . "%'";
            $result = $result . $operator . " c.clid LIKE '%" . $ctel1 . "%'";
            $operator = " OR ";
        }

        $ctel2 = Util::correctNumber($contact->getTel4());
        if ($ctel2 != null) {
            //$result = $result . $operator . " c.dst LIKE '%" . $ctel2 . "%' OR c.src LIKE '%" . $ctel2 . "%' OR c.clid LIKE '%" . $ctel2 . "%'";
            $result = $result . $operator . " c.clid LIKE '%" . $ctel2 . "%'";
            $operator = " OR ";
        }

        $ctel3 = Util::correctNumber($contact->getTel4());
        if ($ctel3 != null) {
            //$result = $result . $operator . " c.dst LIKE '%" . $ctel3 . "%' OR c.src LIKE '%" . $ctel3 . "%' OR c.clid LIKE '%" . $ctel3 . "%'";
            $result = $result . $operator . " c.clid LIKE '%" . $ctel3 . "%'";
            $operator = " OR ";
        }

        $ctel4 = Util::correctNumber($contact->getTel4());
        if ($ctel4 != null) {
            //$result = $result . $operator . " c.dst LIKE '%" . $ctel4 . "%' OR c.src LIKE '%" . $ctel4 . "%' OR c.clid LIKE '%" . $ctel4 . "%'";
            $result = $result . $operator . " c.clid LIKE '%" . $ctel4 . "%'";
            $operator = " OR ";
        }

        /* RESULT
         */
        if ($result != null) {
            return '(' . $result . ')';
        } else {
            return $result;
        }
    }
    
    
    //**************************************************
    //* GET ALL NUMEROS FROM CONTACT AND INTERLOCUTEURS
    //*************************************************
    public function getNumerosSQL($interlocuteurs, $contact) {

        $result = "";
        $operator = "";

        /*
         * INTERLOCUTEURS
         */
        foreach ($interlocuteurs as $i) {
            $tel1 = Util::correctNumber($i->getTel1());
            if ($tel1 != null) {
                $result = $result . $operator . " clid LIKE '%" . $tel1 . "%'";
                $operator = " OR ";
            }

            $tel2 = Util::correctNumber($i->getTel2());
            if ($tel2 != null) {
                $result = $result . $operator . " clid LIKE '%" . $tel2 . "%'";
                $operator = " OR ";
            }

            $tel3 = Util::correctNumber($i->getTel3());
            if ($tel3 != null) {
                $result = $result . $operator . " clid LIKE '%" . $tel3 . "%'";
                $operator = " OR ";
            }

            $tel4 = Util::correctNumber($i->getTel4());
            if ($tel4 != null) {
                $result = $result . $operator . " clid LIKE '%" . $tel4 . "%'";
                $operator = " OR ";
            }

            $email = Util::correctNumber($i->getEmail());
            if ($email != null) {
                $result = $result . $operator . " clid LIKE '%" . $email . "%'";
                $operator = " OR ";
            }
        }

        /*
         * CONTACT
         */
        $ctel1 = Util::correctNumber($contact->getTel1());
        if ($ctel1 != null) {
            $result = $result . $operator . " clid LIKE '%" . $ctel1 . "%'";
            $operator = " OR ";
        }

        $ctel2 = Util::correctNumber($contact->getTel4());
        if ($ctel2 != null) {
            $result = $result . $operator . " clid LIKE '%" . $ctel2 . "%'";
            $operator = " OR ";
        }

        $ctel3 = Util::correctNumber($contact->getTel4());
        if ($ctel3 != null) {
            $result = $result . $operator . " clid LIKE '%" . $ctel3 . "%'";
            $operator = " OR ";
        }

        $ctel4 = Util::correctNumber($contact->getTel4());
        if ($ctel4 != null) {
            $result = $result . $operator . " clid LIKE '%" . $ctel4 . "%'";
            $operator = " OR ";
        }

        /* RESULT
         */
        if ($result != null) {
            return '(' . $result . ')';
        } else {
            return $result;
        }
    }

    //********************
    //function stadistics
    //********************
    //searchAll
    //SELECT nomcontact, codecontact, count(codecontact) as num, sum(billsec) as sum FROM `cdrent` group by codecontact
    //searchAnswered
    //SELECT nomcontact, codecontact, count(codecontact) as num, sum(billsec) as sum FROM `cdrent` WHERE disposition = 'ANSWERED' group by codecontact
    //searchSpecialNum
    //SELECT nomcontact, codecontact, count(codecontact) as num, sum(billsec) as sum FROM `cdrent` WHERE clid LIKE '"08%' group by codecontact


    public function search3($searchparams) {
        $where = $this->getWhere3($searchparams);

        $sql = "SELECT nomcontact, codecontact, count(codecontact) as num, sum(billsec) as sum "
                . "FROM cdrent "
                . $where . " "
                . "group by codecontact ORDER BY nomcontact";

        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();

        return $stmt->fetchAll();
    }

    private function getWhere3($search_params) {
        $where = "";
        $operator = " WHERE ";

        foreach ($search_params as $key => $value) {
            switch ($key) {
                case "clid":
                    $where = $where . $operator . "(clid LIKE '$value')";
                    $operator = " AND ";
                    break;
                case "dateini":
                    $dateini = \DateTime::createFromFormat('d-m-Y', $value)->format('Y-m-d');
                    $where = $where . $operator . "(calldate >= '$dateini')";
                    $operator = " AND ";
                    break;
                case "datefin":
                    $datefin = \DateTime::createFromFormat('d-m-Y', $value)->format('Y-m-d');
                    $where = $where . $operator . "(calldate <= '$datefin')";
                    $operator = " AND ";
                    break;
                case "durationmin":
                    $where = $where . $operator . "(billsec >= $value)";
                    $operator = " AND ";
                    break;
                case "durationmax":
                    $where = $where . $operator . "(billsec <= $value)";
                    $operator = " AND ";
                    break;
                case "disposition":
                    $where = $where . $operator . "(disposition LIKE '$value')";
                    $operator = " AND ";
                    break;
                case "codecontact":
                    $where = $where . $operator . "(codecontact LIKE '$value')";
                    $operator = " AND ";
                    break;
                case "numero":
                    $where = $where . $operator . $value;
                    $operator = " AND ";
                    break;
            }
        }

        return $where;
    }

}
